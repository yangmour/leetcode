> Problem: [30. 串联所有单词的子串](https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/)

[TOC]

# 思路

> 滑动窗口, 可以从一开始用暴力慢慢推

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res = new ArrayList<>();
        int m = s.length(), n = words.length;
        if (m == 0 || n == 0) return res;
        int oneLen = words[0].length();
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        // 最后长度小于数组中单个字符串就不用在考虑了
        for (int i = 0; i < oneLen; i++) {
            int left = i, right = i, count = 0;
            Map<String, Integer> tem = new HashMap<>();
            while (right + oneLen <= m) {
                String str = s.substring(right, right + oneLen);
                right += oneLen;
                if (!map.containsKey(str)) {
                    // 如果不包含的话就移除掉
                    tem.clear();
                    count = 0;
                    left = right;
                } else {
                    tem.put(str, tem.getOrDefault(str, 0) + 1);
                    count++;
                    while (tem.getOrDefault(str, 0) > map.getOrDefault(str, 0)) {
                        String t_w = s.substring(left, left + oneLen);
                        tem.put(t_w, tem.getOrDefault(t_w, 0) - 1); // 移除掉第一个字符串
                        count--;
                        left += oneLen;
                    }

                    if (count == n) {
                        res.add(left);
                        // 满足条件之后,移除第一个字符串进行下一次匹配
                        String t_w = s.substring(left, left + oneLen);
                        tem.put(t_w, tem.get(t_w) - 1); // 移除掉第一个字符串
                        count--;
                        left += oneLen;
                    }
                }
            }
        }
        return res;
    }
}
```

